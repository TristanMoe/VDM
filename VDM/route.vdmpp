class route 

instance variables
    public stations: seq of station := [];
    inv route_inv(stations);

operations 
    public route: seq of station ==> route
    route(s) == 
    ( 
        stations := s; 
    )
    pre route_inv(s);

    pure public get_stations: () ==> seq of station 
    get_stations() ==
        return stations; 

    pure public get_station_by_id: station`station_id ==> station 
    get_station_by_id(id) == 
    (
        return stations(id) 
    );
    -- TODO check id is valid as precondition. 

    pure public get_current: () ==> station 
    get_current() ==
        return hd stations
    pre len stations > 0; 

    pure public get_next: () ==> [station]
    get_next() == 
        return if stations <> [] then hd tl stations else nil;

    public pop_station: () ==> station  
    pop_station() == 
    (
        dcl next : station := hd stations; 
        stations := tl stations; 
        return next; 
    )
    pre len stations > 0; 

    pure public get_station_by_index: nat ==> station 
    get_station_by_index(index) ==
    (
        return stations(index)
    )
    pre index in set inds stations; 
 
    -- Ensure that all stations in route are connected. 
    -- Loop through stations and check that tracks are connected. 
    -- If the next station's track have same reference, they must share a connection. 
    pure route_inv: seq of station ==> bool 
    route_inv(seq_st) == 
        return forall i in set (inds seq_st) & i < len seq_st => 
                seq_st(i).get_tracks() inter seq_st(i+1).get_tracks() <> {}; 

    public print: () ==> ()
    print() ==  
    (
        IO`print("Route: [ ");
        for stat in stations do 
        (
            IO`print(stat.get_id());
            IO`print(" ");
        );
        IO`println("]");
    ); 
end route 
