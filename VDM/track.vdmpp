class track is subclass of globals

instance variables 
    public is_occupied: bool := false; 
    public used_by_train: [unique_id] := nil; 
    public station_one: unique_id; 
    public station_two: unique_id;
    inv track_inv(station_one, station_two); 

operations 
    public track: unique_id * unique_id ==> track
    track(s1, s2) == 
    (
        atomic (
        station_one := s1;
        station_two := s2; 
        );
    )
    pre track_inv(s1, s2);

    pure public get_connected_stations: () ==> set of unique_id
    get_connected_stations() == 
        return {station_one, station_two} 
    post card RESULT = 2; 

    pure public includes_station: unique_id ==> bool 
    includes_station(id) == 
        return station_one = id or station_two = id; 

    public occupy_track: unique_id ==> ()
    occupy_track(t_id) == 
    (
        is_occupied := true; 
        used_by_train := t_id; 
    )
    pre occupy_inv(is_occupied, used_by_train);

    -- Only the train occupying the track may vacant it. 
    public vacant_track: unique_id ==> () 
    vacant_track(t_id) == 
    (
        is_occupied := false; 
        used_by_train := nil; 
    )
    pre vacant_inv(is_occupied, used_by_train, t_id); 

    pure public is_occupied: () ==> bool 
    is_occupied() == 
        return is_occupied; 

    public print: () ==> () 
    print() == 
    (
        (
            IO`print("Track from ");
            IO`print(station_one);
            IO`print(" to ");
            IO`print(station_two);
        );
        IO`println(""); 
    );

functions 
    public track_inv: unique_id * unique_id -> bool 
    track_inv(s1, s2) == 
        s1 <> s2;

    public vacant_inv: bool * [unique_id] * unique_id -> bool 
    vacant_inv(is_oc, oc_id, t_id) == 
        is_oc and oc_id = t_id; 

    public occupy_inv: bool * [unique_id] -> bool 
    occupy_inv(is_oc, oc_id) == 
        not is_oc and oc_id = nil;

end track 
