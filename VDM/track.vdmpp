class track

instance variables 
    public is_occupied: bool := false; 
    public used_by_train: train`train_id := 0; 
    public station_one: station`station_id; 
    public station_two: station`station_id;
    inv track_inv(station_one, station_two); 

operations 
    public track: station`station_id * station`station_id ==> track
    track(s1, s2) == 
    (
        atomic (
        station_one := s1;
        station_two := s2; 
        );
    )
    pre track_inv(s1, s2);

    pure public get_connected_stations: () ==> set of station`station_id
    get_connected_stations() == 
        return {station_one, station_two}; 

    pure public includes_station: station`station_id ==> bool 
    includes_station(id) == 
        return station_one = id or station_two = id; 

    public occupy_track: train`train_id ==> ()
    occupy_track(t_id) == 
    (
        is_occupied := true; 
        used_by_train := t_id; 
    )
    pre is_occupied = false and used_by_train = 0; 

    -- Only the train occupying the track may vacant it. 
    public vacant_track: train`train_id ==> () 
    vacant_track(t_id) == 
    (
        is_occupied := false; 
        used_by_train := 0; 
    )
    pre is_occupied = true and used_by_train = t_id; 

    pure public is_occupied: () ==> bool 
    is_occupied() == 
        return is_occupied; 

    public print: () ==> () 
    print() == 
    (
        (
            IO`print("Track from ");
            IO`print(station_one);
            IO`print(" to ");
            IO`print(station_two);
        );
        IO`println(""); 
    );

functions 
    track_inv: station`station_id * station`station_id -> bool 
    track_inv(s1, s2) == 
        s1 <> s2;

end track 
