class timetable 

instance variables
    train_to_route_map: train_route_map;
    public train_to_schedule_map: schedule_map := {|->}; 
    
types 
    public train_route_map = map train`train_id to route;
    public schedule_map = map train`train_id to schedule;
    public cycle_map = inmap train`train_id to station;

operations
    public timetable: train_route_map ==> timetable
    timetable(t_r_map) == 
    (
        train_to_route_map := t_r_map; 
    ); 

    -- Input is all the trains' routes. 
    -- Output is a schedule for each train that fulfills requirements. 
    -- Schedule are made of cycles, where a train can ADVANCE OR WAIT. 
    -- It must create cycles that avoid collisions and ensure trains reach their destination.
    public generate_schedules: () ==> schedule_map
    generate_schedules() == 
    (
        dcl cycle: nat := 0; 
        while exists sch in set dom schedule_map & sch.destination_part_of_schedule() = false
        do 
        (
            dcl c_m: cycle_map := get_cycle_map(cycle, train_route_map);

            for all t_id in set dom train_route_map
            do 
            (
                if c_m(t_id) -- Think a little about. 
            ); 

            cycle := cycle + 1; 
        ); 
    ); 

functions 
    -- Destinations for the given cycle. 
    -- Create injective map train id -> station 
    get_cycle_map: nat * train_route_map -> cycle_map
    get_cycle_map(cycle, t_r_map) == 
    (
        {t_id |-> t_r_map(t_id).get_station_by_index(cycle) | t_id in set dom t_r_map}
    )

end timetable